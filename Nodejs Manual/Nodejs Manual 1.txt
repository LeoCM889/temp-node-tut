/Lesson 1: Globals/

app.js:

// GLOBALS  - NO WINDOW !!!!

// __dirname  - path to current directory
// __filename - file name
// require    - function to use modules (CommonJS)
// module     - info about current module (file)
// process    - info about env where the program is being executed

console.log(__dirname)
setInterval(() => {
  console.log('hello world')
}, 1000)

/Lesson 2: Modules Setup/

modules.js

// Modules
const leonardo = 'leonardo'
const castillo = 'castillo'

const sayHi = (name) => {
  console.log(`Hello there ${name}`)
}

sayHi('Annestesia')
sayHi(leonardo)
sayHi(castillo)

/Lesson 3: First Module/

03-modules.js:

// CommonJS, every file is a module (by default)
// Modules - Encapsulated Code (only share minimum )
const { leonardo, castillo } = require('./04-names')
const sayHi = require('./05-utils')

sayHi('Annestesia')
sayHi(leonardo)
sayHi(castillo)

04-names.js:

// local
const secret = "SUPER SECRET"
// share
const leonardo = 'leonardo'
const castillo = 'castillo'

module.exports = { leonardo, castillo }

05-utils.js:

const sayHi = (name) => {
  console.log(`Hello there ${name}`)
}

module.exports = sayHi

/Lesson 4: Alternative Syntax/

03-modules.js:

// CommonJS, every file is a module (by default)
// Modules - Encapsulated Code (only share minimum )
const { leonardo, castillo } = require('./04-names')
const sayHi = require('./05-utils')
const data = require('./06-alternative-flavor')
console.log(data)
sayHi('Annestesia')
sayHi(leonardo)
sayHi(castillo)

06-alternative-flavor.js:

module.exports.items = ['item1', 'item2']
const person = {
  name: "Jack"
}

module.exports.singlePerson = person

/Lesson 5: Mind Grenade/

03-modules.js:

// CommonJS, every file is a module (by default)
// Modules - Encapsulated Code (only share minimum )
const { leonardo, castillo } = require('./04-names')
const sayHi = require('./05-utils')
const data = require('./06-alternative-flavor')
require('./07-mind-grenade')
// sayHi('Annestesia')
// sayHi(leonardo)
// sayHi(castillo)

06-alternative-flavor.js:

const num1 = 5
const num2 = 10

const addValues = () => {
  console.log(`the sum is: ${num1 + num2}`)
}

addValues()

/Lesson 6: Built-In Module Intro/

// Built-in Modules

* os
* path
* fs
* http

/Lesson 7: OS Module/

08-os-modules.js:

// OS Module: the os module we built in module provides
// many useful properties and methods for interacting
// with operating system as well as the server

const os = require('os')

// info about current user
const user = os.userInfo()
console.log(user)

// method returns the system uptime in seconds
console.log(`The system Uptime is ${os.uptime()} seconds``)

const currentOS = {
  name: os.type(),
  release: os.release(),
  totalMem: os.totalmem(),
  freeMem: os.freemem(),
}

console.log(currentOS)

/Lesson 8: Path Module/

09-path-module.js:

// Path Module: It allows use to interact with file paths easily
const path = require('path')

// return the platform specific separator
console.log(path.sep)
// the join method joins a sequence of path segments using 
// the platform specific separator as the limiter and second
// thing it does it returns a normalized resulting path
const filePath = path.join('/content', 'subfolder', 'test.txt')
console.log(filePath)
// get the basename of the path, it means it returns the last
// portion  of the path
const base = path.basename(filePath)
console.log(base)
// It returns an absolute path
const absolute = path.resolve(__dirname, 'content', 'subfolder', 'test.txt')
console.log(absolute)

/Lesson 9: Fs Module (Sync)/

fs-async.js:

// Fs Module: It allows to interact with the file system and the module
// Synchronously way = blocking

const { readFileSync, writeFileSync } = require('fs');

// readFileSync reads the content of a file and returns the content 
const first = readFileSync('./content/first.txt', 'utf8');
const second = readFileSync('./content/second.txt', 'utf8');

console.log(`${first} and ${second}`);

// readFileSync creates and write the content of a file
writeFileSync(
  './content/result-sync.txt', 
  `Here is the result: ${first} ${second}`, 
  { flag: 'a' }
)

// const fs = require('fs');
// fs.readFileSync

/Lesson 10: Fs Module (Async)/

fs-async.js:

// Fs Module: It allows to interact with the file system and the module
// Asynchronously way = non-blocking

const { readFile, writeFile } = require('fs');

console.log('start')
readFile('./content/first.txt', 'utf8', (err, result) => {
  if (err) {
    console.log(err);
    return;
  }

  const first = result;
  readFile('./content/second.txt', 'utf8', (err, result) => {
    if (err) {
      console.log(err);
      return;
    }
    const second = result;
    writeFile(
    './content/result-async.txt',
    `Here is the result: ${first}, ${second}`,
    (err, result) => {
      if (err) {
        console.log(err);
        return;
      }
      console.log(result);
    });
  });
});
console.log('starting next task');


/Lesson 11: Sync vs Async/

Synchronously tasks are better when an specific process needs to be done
and we don't want any other process go forward until the one running finishes

Asynchronously Tasks at the other hand are better when we need other processes
running and don't have to wait for them to finish to keep other processes running
as well

/Lesson 12: Http intro/

Node.js has a built-in module called HTTP, which allows Node.js to transfer 
data over the Hyper Text Transfer Protocol (HTTP). To include the HTTP module, 
use the require() method: var http = require('http');

/Lesson 13: Http Module (Setup)/

// http module allows us to set up a web server
const http = require('http');

// createServer method is looking for a callback, the callback function there
// is two parameters, both of them are objects, they are the request and the response

// request: representes the incoming request from the client requesting from the 
// web browser your webpage

// response: what we're sending back to that request, a response

const server = http.createServer((req, res) => {
  res.write('Welcome to our homepage')
  res.end()
})

server.listen(5000)

/Lesson 14: Http Module (More Features)/

// http module allows us to set up a web server
const http = require('http');

// createServer method is looking for a callback, the callback function there
// is two parameters, both of them are objects, they are the request and the response

// request: representes the incoming request from the client requesting from the 
// web browser your webpage

// response: what we're sending back to that request, a response
const server = http.createServer((req, res) => {
  if (req.url === '/') {
    res.end('Hi mom, welcome to my homepage');

  } else if (req.url === '/about') {
    res.end('Here is our short history');

  } else {
    res.end(`
    <h1>Oops!</h1>
    <p>We can't seem to find the page you are looking for</p>
    <a href="/">back home</a>
    `)
  }
  
  // res.write('Hi mom, welcome to my homepage')
  // res.end()
});

server.listen(5000)

/Lesson 15: NPM Command/

// npm - global command, comes with node
// npm --version

// local dependency - use it only in this particular project
// npm i <packageName>

// global dependency - use it in any project
// npm install -g <packageName>
// sudo npm install -g <packageName> (mac)

// package.json - manifest file (stores important info about project/package)
// manual approach (create package.json in the root, create properties etc)
// npm init (step by step, press enter to skip)
// npm init -y (everything default)